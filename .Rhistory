enter_grow() +
enter_fade() +
ease_aes('sine-in')
animate(anim)
#anim_save("Skills.gif", anim)
# Creating a map of responses by country
world_map <- map_data("world")
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = Age), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = MentalHealth), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = EdLevel), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = Employment), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
loadPkg("rpart")
install.packages("rpart")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rpart")
loadPkg("rpart")
# install.packages("rpart")
library("rpart")
knitr::opts_chunk$set(echo = TRUE)
# uncomment and run the below line to install the required packages
#install.packages(c("gganimate", "png", "gifski"))
# install.packages("mltools")
# install.packages("data.table")
# install.packages("MLmetrics")
# install.packages("rpart")
library(mltools)
library(data.table)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ezids)
library(gganimate)
library(png)
library(gifski)
library(pROC)
library(MLmetrics)
library(rpart)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
xkabledplyhead(df, title = "Job Applicants Data")
#structure of a data frame
str(df)
# Check the missing values and count them in each column
print(colSums(is.na(df)))
# Check duplicates
length(unique(df$Index))
# Extract the numeric columns
head(subset(df, select = c(names(df)[sapply(df, is.numeric)])))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(df_clean)
# Extract the character columns
head(subset(df_clean, select = c(names(df)[sapply(df, is.character)])))
df_clean$Age = factor(df_clean$Age)
df_clean$Accessibility = factor(df_clean$Accessibility)
df_clean$EdLevel = factor(df_clean$EdLevel, ordered = T,
levels = c("Other", "NoHigherEd", "Undergraduate", "Master", "PhD"))
df_clean$Gender = factor(df_clean$Gender)
df_clean$MentalHealth = factor(df_clean$MentalHealth)
df_clean$MainBranch = factor(df_clean$MainBranch)
str(df_clean)
length(unique(df_clean$Country))
nrow(subset(df_clean, subset = df_clean$YearsCode<df_clean$YearsCodePro))
# We observe 588 such records
df_clean = subset(df_clean, subset = df_clean$YearsCode>df_clean$YearsCodePro)
# Create a list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "ComputerSkills")
# Set up the plotting area to display all boxplots together
par(mfrow = c(2, length(columns_to_plot)))
# Display the boxplots
for (i in 1:length(columns_to_plot)) {
boxplot(df_clean[[columns_to_plot[i]]], main = columns_to_plot[i],col = "lightblue")
}
for (i in 1:length(columns_to_plot)) {
hist(df_clean[[columns_to_plot[i]]], main = columns_to_plot[i], xlab = element_blank(), col = "lightblue")
}
# plotting area layout
par(mfrow = c(2, 1))
o_code= quantile(df_clean$YearsCode, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$YearsCode))
o_procode = quantile(df_clean$YearsCodePro, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$YearsCodePro))
o_presal = quantile(df_clean$PreviousSalary, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$PreviousSalary))
o_cskill = quantile(df_clean$ComputerSkills, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$ComputerSkills))
print(paste(o_code, o_procode, o_presal, o_cskill))
df_clean = subset(df_clean, subset = df_clean$YearsCode < 40)
df_clean = subset(df_clean, subset = df_clean$YearsCodePro < 40)
df_clean = subset(df_clean, subset = df_clean$ComputerSkills < 35)
df_final <- df_clean
xkabledplyhead(df_final, title = "Final Data")
# Getting the number of categorical and numerical columns
cat_cols <- colnames(subset(df_final, select = c(names(df_final)[(sapply(df_final, is.factor)) |
(sapply(df_final, is.ordered)) |
(sapply(df_final, is.character))])))
num_cols <- colnames(subset(df_final, select = c(names(df_final)[sapply(df_final, is.integer)])))
# Displaying the information
cat("Basic summary and Raw Counts for the Dataset:\n")
cat("Rows:", dim(df_final)[1], "\n")
cat("Columns:", dim(df_final)[2], "\n")
cat("Numerical columns:", num_cols, "\n")
cat("Categorical Columns:", cat_cols, "\n")
ggplot(data = subset(df_final, subset = Employed=='hired'), aes(EdLevel, after_stat(count))) +
geom_bar(aes(fill = Gender), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by gender for employed workers", x="Education Level", y="Count")
ggplot(data = df_final, aes(EdLevel)) +
geom_bar(aes(fill = Employment), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Employment", x="Education Level", y="Count")
ggplot(data = df_final, aes(MainBranch)) +
geom_bar(aes(fill = Age), position = 'dodge', alpha = 0.5) +
labs(title = "MainBranch by Age", x="MainBranch", y="Count")
ggplot(data = df_final, aes(x = PreviousSalary, fill = MentalHealth)) +
geom_density(alpha = 0.5) +
labs(title = "Density plot of Previous Salary by Mental Health", x="Previous Salary", y= 'Density')
ggplot(data = df_final, aes(x = MentalHealth, y = PreviousSalary)) +
geom_jitter(alpha = 0.5, col = 'navy') +
labs(title = "Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
plotdata <- df_final %>%
group_by(MentalHealth) %>%
summarize(mean_prevsalary = mean(PreviousSalary))
ggplot(data = plotdata, aes(x = MentalHealth, y = mean_prevsalary)) +
geom_bar(stat = 'identity', alpha = 0.5, aes(fill = MentalHealth)) +
labs(title = "Mean Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
df_final %>%
separate_rows(HaveWorkedWith, sep = ";") %>%
group_by(HaveWorkedWith) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) -> skills_df
head(skills_df, 10)
plot <- ggplot(data = head(skills_df, 10), aes(x = reorder(HaveWorkedWith, Count), y = Count)) +
geom_bar(stat = 'identity', aes(fill = HaveWorkedWith), alpha = 0.6) +
coord_flip() +
theme(axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(size = 0.1, color = "grey"),
panel.grid.minor.x = element_line(size = 0.1, color = "grey"),
plot.background = element_blank()) +
geom_text(aes(y = Count, label = Count)) +
labs(title = "Skills used by number of applicants",
x = "Skill", y = "No. of applicants possessing the skill")
anim <- plot +
transition_states(HaveWorkedWith, transition_length = 4, wrap = FALSE) +
shadow_mark() +
enter_grow() +
enter_fade() +
ease_aes('sine-in')
animate(anim)
#anim_save("Skills.gif", anim)
# We first subset into the different education levels, here undergraduate
undergrad <- subset(df_clean, df_clean$EdLevel == "Undergraduate")
# For the two sample z test, we need our two samples, males and nonmales
undergrad_male <- subset(undergrad, undergrad$Gender == "Man") # Sample 1, males
undergrad_male_employed <- subset(undergrad_male, undergrad_male$Employment == "currently_employed")
undergrad_nonmales <- subset(undergrad, undergrad$Gender != "Man") # Sample 2, females and nonbinary
undergrad_nonmales_employed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment == "currently_employed"))
undergrad_employed_ztest <- prop.test(c(nrow(undergrad_male_employed), nrow(undergrad_nonmales_employed)), c(nrow(undergrad_male),nrow(undergrad_nonmales)))
undergrad_employed_ztest
# We first subset into the different education levels, here masters
masters <- subset(df_clean, df_clean$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
masters_male_employed <- subset(masters_male, masters_male$Employment == "currently_employed")
masters_nonmales <- subset(masters, undergrad$Gender != "Man") # Sample 2, females and nonbinary
masters_nonmales_employed <- (subset(masters_nonmales, masters_nonmales$Employment == "currently_employed"))
masters_employed_ztest <- prop.test(c(nrow(masters_male_employed), nrow(masters_nonmales_employed)), c(nrow(masters_male),nrow(masters_nonmales)))
masters_employed_ztest
# We first subset into the different education levels, here PhD
phd <- subset(df_clean, df_clean$EdLevel == "PhD")
# For the two sample z test, we need our two samples, males and nonmales
phd_male <- subset(phd, phd$Gender == "Man") # Sample 1, males
phd_male_employed <- subset(phd_male, phd_male$Employment == "currently_employed")
phd_nonmales <- subset(phd, phd$Gender != "Man") # Sample 2, females and nonbinary
phd_nonmales_employed <- (subset(phd_nonmales, phd_nonmales$Employment == "currently_employed"))
phd_employed_ztest <- prop.test(c(nrow(phd_male_employed), nrow(phd_nonmales_employed)), c(nrow(phd_male),nrow(phd_nonmales)))
phd_employed_ztest
loadPkg("ggplot2")
ggplot(df_clean, aes(x=EdLevel, y=ComputerSkills)) +
geom_boxplot( colour=c("#ff0000","#FFFF00", "#11cc11","#0000ff","#ff00ff"), alpha = .5, outlier.shape=8, outlier.size=4) +
labs(x="Education Level", y = "Number of Computer Skills")
View(df_final)
set.seed(1)
employfit <- rpart(Employed ~ ,, data=df_final, method="class", control = list(maxdepth = 4) )
set.seed(1)
employfit <- rpart(Employed ~ ., data=df_final, method="class", control = list(maxdepth = 4) )
printcp(employfit) # display the results
plotcp(employfit) # visualize cross-validation results
summary(employfit) # detailed summary of splits
# plot tree
plot(employfit, uniform=TRUE, main="Classification Tree for Employment")
text(employfit, use.n=TRUE, all=TRUE, cex=.8)
knitr::opts_chunk$set(echo = TRUE)
# Uncomment and run the below line to install the required packages
# install.packages(c("gganimate", "png", "gifski"))
# install.packages("mltools")
# install.packages("data.table")
# install.packages("MLmetrics")
# install.packages("rpart")
# install.packages("class")
# install.packages("e1071")
library(rpart.plot)
library(mltools)
library(data.table)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ezids)
library(gganimate)
library(png)
library(gifski)
library(pROC)
library(MLmetrics)
library(rpart)
library(class)
library(e1071)
library(ROCR)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
xkabledplyhead(df, title = "Job Applicants Data")
# Structure of a data frame
str(df)
# Check the missing values and count them in each column
print(colSums(is.na(df)))
# Check duplicates
length(unique(df$Index))
# Extract the numeric columns
head(subset(df, select = c(names(df)[sapply(df, is.numeric)])))
# Extract the numeric columns
head(subset(df, select = c(names(df)[sapply(df, is.numeric)])))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(df_clean)
# Extract the character columns
head(subset(df_clean, select = c(names(df)[sapply(df, is.character)])))
df_clean$Age = factor(df_clean$Age)
df_clean$Accessibility = factor(df_clean$Accessibility)
df_clean$EdLevel = factor(df_clean$EdLevel, ordered = T,
levels = c("Other", "NoHigherEd", "Undergraduate", "Master", "PhD"))
df_clean$Gender = factor(df_clean$Gender)
df_clean$MentalHealth = factor(df_clean$MentalHealth)
df_clean$MainBranch = factor(df_clean$MainBranch)
str(df_clean)
length(unique(df_clean$Country))
nrow(subset(df_clean, subset = df_clean$YearsCode<df_clean$YearsCodePro))
# We observe 588 such records
df_clean = subset(df_clean, subset = df_clean$YearsCode>df_clean$YearsCodePro)
# Create a list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "ComputerSkills")
# Set up the plotting area to display all boxplots together
par(mfrow = c(2, length(columns_to_plot)))
# Display the boxplots
for (i in 1:length(columns_to_plot)) {
boxplot(df_clean[[columns_to_plot[i]]], main = columns_to_plot[i],col = "lightblue")
}
for (i in 1:length(columns_to_plot)) {
hist(df_clean[[columns_to_plot[i]]], main = columns_to_plot[i], xlab = element_blank(), col = "lightblue")
}
# plotting area layout
par(mfrow = c(2, 1))
o_code= quantile(df_clean$YearsCode, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$YearsCode))
o_procode = quantile(df_clean$YearsCodePro, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$YearsCodePro))
o_presal = quantile(df_clean$PreviousSalary, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$PreviousSalary))
o_cskill = quantile(df_clean$ComputerSkills, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$ComputerSkills))
print(paste(o_code, o_procode, o_presal, o_cskill))
df_clean = subset(df_clean, subset = df_clean$YearsCode < 40)
df_clean = subset(df_clean, subset = df_clean$YearsCodePro < 40)
df_clean = subset(df_clean, subset = df_clean$ComputerSkills < 35)
df_final <- df_clean
xkabledplyhead(df_final, title = "Final Data")
# Getting the number of categorical and numerical columns
cat_cols <- colnames(subset(df_final, select = c(names(df_final)[(sapply(df_final, is.factor)) |
(sapply(df_final, is.ordered)) |
(sapply(df_final, is.character))])))
num_cols <- colnames(subset(df_final, select = c(names(df_final)[sapply(df_final, is.integer)])))
# Displaying the information
cat("Basic summary and Raw Counts for the Dataset:\n")
cat("Rows:", dim(df_final)[1], "\n")
cat("Columns:", dim(df_final)[2], "\n")
cat("Numerical columns:", num_cols, "\n")
cat("Categorical Columns:", cat_cols, "\n")
ggplot(data = subset(df_final, subset = Employed=='hired'), aes(EdLevel, after_stat(count))) +
geom_bar(aes(fill = Gender), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Gender for Employed Workers", x="Education Level", y="Count")
ggplot(data = df_final, aes(EdLevel)) +
geom_bar(aes(fill = Employment), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Employment", x="Education Level", y="Count")
ggplot(data = df_final, aes(MainBranch)) +
geom_bar(aes(fill = Age), position = 'dodge', alpha = 0.5) +
labs(title = "MainBranch by Age", x="MainBranch", y="Count")
ggplot(data = df_final, aes(x = PreviousSalary, fill = MentalHealth)) +
geom_density(alpha = 0.5) +
labs(title = "Density plot of Previous Salary by Mental Health", x="Previous Salary", y= 'Density')
ggplot(data = df_final, aes(x = MentalHealth, y = PreviousSalary)) +
geom_jitter(alpha = 0.5, col = 'navy') +
labs(title = "Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
plotdata <- df_final %>%
group_by(MentalHealth) %>%
summarize(mean_prevsalary = mean(PreviousSalary))
ggplot(data = plotdata, aes(x = MentalHealth, y = mean_prevsalary)) +
geom_bar(stat = 'identity', alpha = 0.5, aes(fill = MentalHealth)) +
labs(title = "Mean Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
df_final %>%
separate_rows(HaveWorkedWith, sep = ";") %>%
group_by(HaveWorkedWith) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) -> skills_df
head(skills_df, 10)
df_final %>%
separate_rows(HaveWorkedWith, sep = ";") %>%
group_by(HaveWorkedWith) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) -> skills_df
head(skills_df, 10)
# We first subset into the different education levels, here undergraduate
undergrad <- subset(df_clean, df_clean$EdLevel == "Undergraduate")
# For the two sample z test, we need our two samples, males and nonmales
undergrad_male <- subset(undergrad, undergrad$Gender == "Man") # Sample 1, males
undergrad_male_employed <- subset(undergrad_male, undergrad_male$Employment == "currently_employed")
undergrad_nonmales <- subset(undergrad, undergrad$Gender != "Man") # Sample 2, females and nonbinary
undergrad_nonmales_employed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment == "currently_employed"))
undergrad_employed_ztest <- prop.test(c(nrow(undergrad_male_employed), nrow(undergrad_nonmales_employed)), c(nrow(undergrad_male),nrow(undergrad_nonmales)))
undergrad_employed_ztest
# We first subset into the different education levels, here masters
masters <- subset(df_clean, df_clean$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
masters_male_employed <- subset(masters_male, masters_male$Employment == "currently_employed")
masters_nonmales <- subset(masters, undergrad$Gender != "Man") # Sample 2, females and nonbinary
masters_nonmales_employed <- (subset(masters_nonmales, masters_nonmales$Employment == "currently_employed"))
masters_employed_ztest <- prop.test(c(nrow(masters_male_employed), nrow(masters_nonmales_employed)), c(nrow(masters_male),nrow(masters_nonmales)))
masters_employed_ztest
# We first subset into the different education levels, here PhD
phd <- subset(df_clean, df_clean$EdLevel == "PhD")
# For the two sample z test, we need our two samples, males and nonmales
phd_male <- subset(phd, phd$Gender == "Man") # Sample 1, males
phd_male_employed <- subset(phd_male, phd_male$Employment == "currently_employed")
phd_nonmales <- subset(phd, phd$Gender != "Man") # Sample 2, females and nonbinary
phd_nonmales_employed <- (subset(phd_nonmales, phd_nonmales$Employment == "currently_employed"))
phd_employed_ztest <- prop.test(c(nrow(phd_male_employed), nrow(phd_nonmales_employed)), c(nrow(phd_male),nrow(phd_nonmales)))
phd_employed_ztest
loadPkg("ggplot2")
ggplot(df_clean, aes(x=EdLevel, y=ComputerSkills)) +
geom_boxplot( colour=c("#ff0000","#FFFF00", "#11cc11","#0000ff","#ff00ff"), alpha = .5, outlier.shape=8, outlier.size=4) +
labs(x="Education Level", y = "Number of Computer Skills")
anovaRes = aov(ComputerSkills ~ EdLevel, data=df_clean)
anovaSummary = summary(anovaRes)
anovaSummary
# Extracting mean computer skills for each education level
mean_skills_Other = mean(subset(df_clean, EdLevel == "Other")$ComputerSkills)
mean_skills_NoHigherEd = mean(subset(df_clean, EdLevel == "NoHigherEd")$ComputerSkills)
mean_skills_Undergraduate = mean(subset(df_clean, EdLevel == "Undergraduate")$ComputerSkills)
mean_skills_Master = mean(subset(df_clean, EdLevel == "Master")$ComputerSkills)
mean_skills_PhD = mean(subset(df_clean, EdLevel == "PhD")$ComputerSkills)
tukeyRes <- TukeyHSD(anovaRes)
tukeyRes
# We need four categories: <35, NotDev; >35, NotDev; <35 Dev; >35 Dev
notDev_under35 <- subset(df_clean, df_clean$Age == "<35" & df_clean$MainBranch == "NotDev")
notDev_over35 <- subset(df_clean, df_clean$Age == ">35" & df_clean$MainBranch == "NotDev")
dev_under35 <- subset(df_clean, df_clean$Age == "<35" & df_clean$MainBranch == "Dev")
dev_over35 <- subset(df_clean, df_clean$Age == ">35" & df_clean$MainBranch == "Dev")
chisq_matrix <- matrix(c(nrow(dev_over35),nrow(dev_under35),nrow(notDev_over35),nrow(notDev_under35)), nrow = 2, ncol = 2)
# Now we conduct a chi square test of independence
chitest = chisq.test(chisq_matrix)
chitest
# Subset the PreviousSalary for individuals with 'Yes' and 'No' in the MentalHealth column
salary_yes <- df_clean$PreviousSalary[df_clean$MentalHealth == "Yes"]
salary_no <- df_clean$PreviousSalary[df_clean$MentalHealth == "No"]
# Checking the mean of both groups just to get an idea
format(mean(salary_yes, na.rm = TRUE), digits=5)
format(mean(salary_no, na.rm = TRUE), digits=5)
# Now we conduct a two-sample t-test on PreviousSalary between the two groups
ttest_2sample_salary_yes_no <- t.test(salary_yes, salary_no)
ttest_2sample_salary_yes_no
str(df_final)
#saving df_final copy
df_enc = df_final
# We first want to set age as an ordinal factor:
df_enc$Age = factor(df_enc$Age, ordered = T,
levels = c("<35", ">35"))
# EdLevel was already converted to an ordinal variable in the EDA section so we can proceed
# Now we can conduct label encoding on Age and Education Level:
df_enc$Age <- as.numeric(df_enc$Age)
df_enc$EdLevel <- as.numeric(df_enc$EdLevel)
df_enc$Accessibility <- as.numeric(df_enc$Accessibility)
df_enc$Employment <- as.numeric(df_enc$Employment)
df_enc$MentalHealth <- as.numeric(df_enc$MentalHealth)
df_enc$MainBranch <- as.numeric(df_enc$MainBranch)
# subsetting the dataframe to select those cateogrical variables that require one hot encoding:
one_hot_df <- subset(df_enc, select = Gender)
#performing one hot encoding
one_hot_df <- one_hot(as.data.table(one_hot_df))
# saving the dataframe before one hot encoding:
df_before_oneHot <- df_enc
# dropping the categorical variables that we just performed one hot encoding on and adding the new columns:
drops <- "Gender"
df_enc <- df_enc[ , !(names(df_enc) %in% drops)]
df_enc <- cbind(df_enc, one_hot_df)
df_enc <- subset(df_enc, select = -c(HaveWorkedWith))
# one-hot encode Country here
# df_enc$Country = factor(df_enc$Country)
# df_enc <- subset(cbind(df_enc, one_hot(as.data.table(df_enc$Country))), select = -c(Country))
# str(df_enc)
df_final2 <- subset(df_enc, select = -c(Country))
# head(df_final2)
str(df_final2)
ggplot(data = df_final2, aes(Employed, after_stat(count))) +
geom_bar(alpha = 0.5, col = 'navy')
df_final2 <- df_final2 %>%
mutate_at(vars('YearsCode', 'YearsCodePro', 'PreviousSalary', 'ComputerSkills'), scale)
data_sample <- sample(c(TRUE, FALSE), nrow(df_final2), replace=TRUE, prob=c(0.8, 0.2))
train <- df_final2[data_sample, ]
test <- df_final2[!data_sample, ]
set.seed(47)
lr_model <- glm(Employed~., data = train, family = "binomial")
summary(lr_model)
pred=predict(lr_model, test, type = "response" )
# test$prob=prob
roc_lr <- roc(test$Employed, pred)
auc(roc_lr) # area-under-curve prefer 0.8 or higher.
plot(roc_lr, print.auc = T, main = "ROC Curve for LR Model", col = "#514BA2", lwd = 2)
train_data <- train[, names(train) != "Employed"]
test_data <- test[, names(test) != "Employed"]
train_labels <- train$Employed
# KNN model with k = 3
k <- 3
knn_model <- class::knn(train = train_data, test = test_data, cl = train_labels, k = k, prob=TRUE)
roc_knn <-roc(test$Employed, attributes(knn_model)$prob)
auc(roc_knn)
plot(roc_knn, print.auc = T, main = "ROC Curve for KNN Model", col = "#514BA2", lwd = 2)
# Growing the tree
set.seed(47)
dt_model <- rpart(Employed ~ ., data=df_final2)
printcp(dt_model)
plotcp(dt_model)
summary(dt_model)
printcp(dt_model)
# plot tree
rpart.plot(dt_model, main="Decision Tree for Employment")
# Growing the tree
set.seed(47)
dt_model <- rpart(Employed ~ ., data=df_final2)
# printcp(dt_model)
plotcp(dt_model)
summary(dt_model)
printcp(dt_model)
# plot tree
rpart.plot(dt_model, main="Decision Tree for Employment")
# Growing the tree
set.seed(47)
dt_model <- rpart(Employed ~ ., data=df_final2)
plotcp(dt_model)
summary(dt_model)
printcp(dt_model)
# plot tree
rpart.plot(dt_model, main="Decision Tree for Employment")
p1 <- predict(dt_model, test, type = 'prob')# instead of p1 dt_pred
p1 <- p1[,2]
r <- roc(test$Employed, p1)# roc_dt
auc(r)
plot(r, print.auc = T, main = "ROC Curve for Decistion Tree Model", col = "#514BA2", lwd = 2)
minsplit_vals <- c(2, 3, 5, 7, 10, 12, 15, 17, 20, 23, 27, 30, 45, 50, 75, 91, 100)
max_depth_vals <- c(2, 3, 5, 7, 10, 12, 15, 17, 20, 23, 27, 30)
auc_values = c()
# Nested for loop to iterate through all combinations
for (minsplit_val in minsplit_vals) {
for (max_depth_val in max_depth_vals) {
dt_model_loop <- rpart(Employed ~ ., data=train, minsplit = minsplit_val, maxdepth = max_depth_val)
p1_loop <- predict(dt_model_loop, test, type = 'prob')
p1_loop <- p1_loop[,2]
r_loop <- roc(test$Employed, p1_loop, percent = TRUE)
AUC_val <- auc(r_loop)
auc_values <- c(auc_values, AUC_val)
print(paste('The AUC value for model with minsplit =', minsplit_val, 'and maxdepth =', max_depth_val, 'is', round(AUC_val, digits = 2), '%'))
}
}
dt_model_nocompskills <- rpart(Employed ~ Age + Accessibility + EdLevel + Employment + MentalHealth + MainBranch + YearsCode + YearsCodePro + PreviousSalary + Gender_Man + Gender_NonBinary + Gender_Woman, data=train)
rpart.plot(dt_model_nocompskills, main="Decision Tree for Employment")
dt_model_nocompskills <- rpart(Employed ~ Age + Accessibility + EdLevel + Employment + MentalHealth + MainBranch + YearsCode + YearsCodePro + PreviousSalary + Gender_Man + Gender_NonBinary + Gender_Woman, data=train)
rpart.plot(dt_model_nocompskills, main="Decision Tree for Employment")
dt_nocs_pred <- predict(dt_model_nocompskills, test, type = 'prob')
dt_nocs_pred  <- dt_nocs_pred [,2]
r <- roc(test$Employed, dt_nocs_pred )
auc(r)
plot(r, print.auc = T, main = "ROC Curve for Decistion Tree Model Without Computer Skills", col = "#514BA2", lwd = 2)
