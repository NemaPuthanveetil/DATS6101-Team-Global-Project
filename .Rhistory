masters <- subset(df_clean, df_clean$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
# undergrad_male_employed <- subset(undergrad_male, undergrad_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
#
#
#
# undergrad_nonmales <- subset(undergrad, undergrad$Gender != "Man") # Sample 2, females and nonbinary
#
# undergrad_nonmales_employed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
#
#
#
# undergrad_employed_ztest <- prop.test(c(31509, 2319), c(34855,2547))
# undergrad_employed_ztest
View(masters_male)
# We first subset into the different education levels, here masters
masters <- subset(df_clean, df_clean$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
masters_male_employed <- subset(masters_male, masters_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
#
#
#
# undergrad_nonmales <- subset(undergrad, undergrad$Gender != "Man") # Sample 2, females and nonbinary
#
# undergrad_nonmales_employed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
#
#
#
# undergrad_employed_ztest <- prop.test(c(31509, 2319), c(34855,2547))
# undergrad_employed_ztest
View(masters_male_employed)
# We first subset into the different education levels, here masters
masters <- subset(df_clean, df_clean$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
masters_male_employed <- subset(masters_male, masters_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
masters_nonmales <- subset(masters, undergrad$Gender != "Man") # Sample 2, females and nonbinary
masters_nonmales_employed <- (subset(masters_nonmales, masters_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
# undergrad_employed_ztest <- prop.test(c(31509, 2319), c(34855,2547))
# undergrad_employed_ztest
# We first subset into the different education levels, here masters
masters <- subset(df_clean, df_clean$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
masters_male_employed <- subset(masters_male, masters_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
masters_nonmales <- subset(masters, undergrad$Gender != "Man") # Sample 2, females and nonbinary
masters_nonmales_employed <- (subset(masters_nonmales, masters_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
masters_employed_ztest <- prop.test(c(15447, 1105), c(17579,2547))
masters_employed_ztest
View(df_final)
View(df_final)
View(df_final)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(MASS)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
head(df)
#structure of a data frame
str(df)
# Check the missing values and count them in each column
print(colSums(is.na(df)))
# Check duplicates
length(unique(df$Index))
# Extract the numeric columns
head(subset(df, select = c(names(df)[sapply(df, is.numeric)])))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(df_clean)
# Extract the character columns
head(subset(df_clean, select = c(names(df)[sapply(df, is.character)])))
df_clean$Age = factor(df_clean$Age)
df_clean$Accessibility = factor(df_clean$Accessibility)
df_clean$EdLevel = factor(df_clean$EdLevel, ordered = T,
levels = c("Other", "NoHigherEd", "Undergraduate", "Master", "PhD"))
df_clean$Gender = factor(df_clean$Gender)
df_clean$MentalHealth = factor(df_clean$MentalHealth)
df_clean$MainBranch = factor(df_clean$MainBranch)
str(df_clean)
length(unique(df_clean$Country))
df_final <- df_clean
head(df_final)
# Create a list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "Employed", "ComputerSkills")
# Create a boxplot for each column and store it in a list
boxplots <- lapply(df_final[columns_to_plot], boxplot, main = "Combined Boxplot")
# Set up the plotting area to display all boxplots together
par(mfrow = c(1, length(columns_to_plot)))
# Display the boxplots
for (i in 1:length(boxplots)) {
boxplot(df_final[[columns_to_plot[i]]], main = columns_to_plot[i])
}
# plotting area layout
par(mfrow = c(1, 1))
#  list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "Employed", "ComputerSkills")
# display all boxplots together
par(mfrow = c(1, length(columns_to_plot)))
# Create and display boxplots without outliers
for (col in columns_to_plot) {
boxplot(df_final[[col]], main = col, outline = FALSE)
}
# plotting area layout
par(mfrow = c(1, 1))
ggplot(data = subset(df_final, subset = Employed=='hired'), aes(EdLevel, after_stat(count))) +
geom_bar(aes(fill = Gender), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by gender for employed workers", x="Education Level", y="Count")
ggplot(data = df_final, aes(EdLevel)) +
geom_bar(aes(fill = Employment), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Employment", x="Education Level", y="Count")
ggplot(data = df_final, aes(MainBranch)) +
geom_bar(aes(fill = Age), position = 'dodge', alpha = 0.5) +
labs(title = "MainBranch by Age", x="MainBranch", y="Count")
ggplot(data = df_final, aes(x = PreviousSalary, fill = MentalHealth)) +
geom_density(alpha = 0.5) +
labs(title = "Density plot of Previous Salary by Mental Health", x="Previous Salary", y= 'Density')
ggplot(data = df_final, aes(x = MentalHealth, y = PreviousSalary)) +
geom_jitter(alpha = 0.5, col = 'navy') +
labs(title = "Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
plotdata <- df_final %>%
group_by(MentalHealth) %>%
summarize(mean_prevsalary = mean(PreviousSalary))
ggplot(data = plotdata, aes(x = MentalHealth, y = mean_prevsalary)) +
geom_bar(stat = 'identity', alpha = 0.5) +
labs(title = "Mean Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
df_final %>%
separate_rows(HaveWorkedWith, sep = ";") %>%
group_by(HaveWorkedWith) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# We first subset into the different education levels, here undergraduate
undergrad <- subset(df_final, df_final$EdLevel == "Undergraduate")
# For the two sample z test, we need our two samples, males and nonmales
undergrad_male <- subset(undergrad, undergrad$Gender == "Man") # Sample 1, males
undergrad_male_employed <- subset(undergrad_male, undergrad_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
undergrad_nonmales <- subset(undergrad, undergrad$Gender != "Man") # Sample 2, females and nonbinary
undergrad_nonmales_employed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
undergrad_employed_ztest <- prop.test(c(31509, 2319), c(34855,2547))
undergrad_employed_ztest
# We first subset into the different education levels, here masters
masters <- subset(df_final, df_final$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
masters_male_employed <- subset(masters_male, masters_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
masters_nonmales <- subset(masters, undergrad$Gender != "Man") # Sample 2, females and nonbinary
masters_nonmales_employed <- (subset(masters_nonmales, masters_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
masters_employed_ztest <- prop.test(c(15447, 1105), c(17579,2547))
masters_employed_ztest
# We first subset into the different education levels, here PhD
phd <- subset(df_final, df_final$EdLevel == "PhD")
# For the two sample z test, we need our two samples, males and nonmales
phd_male <- subset(phd, phd$Gender == "Man") # Sample 1, males
phd_male_employed <- subset(phd_male, phd_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
phd_nonmales <- subset(phd, phd$Gender != "Man") # Sample 2, females and nonbinary
phd_nonmales_employed <- (subset(phd_nonmales, phd_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
phd_employed_ztest <- prop.test(c(2153, 185), c(2402,206))
phd_employed_ztest
# dep is quantitative and more than 3 independent categories
anovaRes <- aov(Employment ~ EdLevel, data=df_final)
# dep is quantitative and more than 3 independent categories
anovaRes <- aov(Employment ~ EdLevel, data=df_final)
xkabledply(anovaRes, title = "ANOVA result summary")
library(ggplot2)
library(tidyr)
library(dplyr)
library(MASS)
library(ezids)
# dep is quantitative and more than 3 independent categories
anovaRes <- aov(Employment ~ EdLevel, data=df_final)
xkabledply(anovaRes, title = "ANOVA result summary")
# dep is quantitative and more than 3 independent categories
anovaRes <- aov(Employed ~ EdLevel, data=df_final)
xkabledply(anovaRes, title = "ANOVA result summary")
View(df_final)
# dep is quantitative and more than 3 independent categories
anovaRes <- aov(Employed ~ EdLevel, data=df_final)
anovaRes
View(df_final)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
head(df)
#structure of a data frame
str(df)
# Check the missing values and count them in each column
print(colSums(is.na(df)))
# Check duplicates
length(unique(df$Index))
# Extract the numeric columns
head(subset(df, select = c(names(df)[sapply(df, is.numeric)])))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(df_clean)
# Extract the character columns
head(subset(df_clean, select = c(names(df)[sapply(df, is.character)])))
df_clean$Age = factor(df_clean$Age)
df_clean$Accessibility = factor(df_clean$Accessibility)
df_clean$EdLevel = factor(df_clean$EdLevel, ordered = T,
levels = c("Other", "NoHigherEd", "Undergraduate", "Master", "PhD"))
df_clean$Gender = factor(df_clean$Gender)
df_clean$MentalHealth = factor(df_clean$MentalHealth)
df_clean$MainBranch = factor(df_clean$MainBranch)
str(df_clean)
length(unique(df_clean$Country))
df_final <- df_clean
head(df_final)
# Create a list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "Employed", "ComputerSkills")
# Create a boxplot for each column and store it in a list
boxplots <- lapply(df_final[columns_to_plot], boxplot, main = "Combined Boxplot")
# Set up the plotting area to display all boxplots together
par(mfrow = c(1, length(columns_to_plot)))
# Display the boxplots
for (i in 1:length(boxplots)) {
boxplot(df_final[[columns_to_plot[i]]], main = columns_to_plot[i])
}
# plotting area layout
par(mfrow = c(1, 1))
#  list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "Employed", "ComputerSkills")
# display all boxplots together
par(mfrow = c(1, length(columns_to_plot)))
# Create and display boxplots without outliers
for (col in columns_to_plot) {
boxplot(df_final[[col]], main = col, outline = FALSE)
}
# plotting area layout
par(mfrow = c(1, 1))
ggplot(data = subset(df_final, subset = Employed=='hired'), aes(EdLevel, after_stat(count))) +
geom_bar(aes(fill = Gender), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by gender for employed workers", x="Education Level", y="Count")
ggplot(data = df_final, aes(EdLevel)) +
geom_bar(aes(fill = Employment), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Employment", x="Education Level", y="Count")
ggplot(data = df_final, aes(MainBranch)) +
geom_bar(aes(fill = Age), position = 'dodge', alpha = 0.5) +
labs(title = "MainBranch by Age", x="MainBranch", y="Count")
View(df_final)
ggplot(data = df_final, aes(x = PreviousSalary, fill = MentalHealth)) +
geom_density(alpha = 0.5) +
labs(title = "Density plot of Previous Salary by Mental Health", x="Previous Salary", y= 'Density')
ggplot(data = df_final, aes(x = MentalHealth, y = PreviousSalary)) +
geom_jitter(alpha = 0.5, col = 'navy') +
labs(title = "Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
plotdata <- df_final %>%
group_by(MentalHealth) %>%
summarize(mean_prevsalary = mean(PreviousSalary))
ggplot(data = plotdata, aes(x = MentalHealth, y = mean_prevsalary)) +
geom_bar(stat = 'identity', alpha = 0.5) +
labs(title = "Mean Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
df_final %>%
separate_rows(HaveWorkedWith, sep = ";") %>%
group_by(HaveWorkedWith) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
# We first subset into the different education levels, here undergraduate
undergrad <- subset(df_final, df_final$EdLevel == "Undergraduate")
# For the two sample z test, we need our two samples, males and nonmales
undergrad_male <- subset(undergrad, undergrad$Gender == "Man") # Sample 1, males
undergrad_male_employed <- subset(undergrad_male, undergrad_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
undergrad_nonmales <- subset(undergrad, undergrad$Gender != "Man") # Sample 2, females and nonbinary
undergrad_nonmales_employed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
undergrad_employed_ztest <- prop.test(c(31509, 2319), c(34855,2547))
undergrad_employed_ztest
# We first subset into the different education levels, here masters
masters <- subset(df_final, df_final$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
masters_male_employed <- subset(masters_male, masters_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
masters_nonmales <- subset(masters, undergrad$Gender != "Man") # Sample 2, females and nonbinary
masters_nonmales_employed <- (subset(masters_nonmales, masters_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
masters_employed_ztest <- prop.test(c(15447, 1105), c(17579,2547))
masters_employed_ztest
# We first subset into the different education levels, here PhD
phd <- subset(df_final, df_final$EdLevel == "PhD")
# For the two sample z test, we need our two samples, males and nonmales
phd_male <- subset(phd, phd$Gender == "Man") # Sample 1, males
phd_male_employed <- subset(phd_male, phd_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
phd_nonmales <- subset(phd, phd$Gender != "Man") # Sample 2, females and nonbinary
phd_nonmales_employed <- (subset(phd_nonmales, phd_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
phd_employed_ztest <- prop.test(c(2153, 185), c(2402,206))
phd_employed_ztest
# GOF: dep is categorical, independent x variable is two samples
# We first want to create a contingency table to determine whether classifcation of age is significant in determining whether an individual is a professional developer or not
# We need four categories: <35, NotDev; >35, NotDev; <35 Dev; >35 Dev
notDev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "NotDev")
notDev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "NotDev")
dev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "Dev")
dev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "Dev")
# GOF: dep is categorical, independent x variable is two samples
# We first want to create a contingency table to determine whether classification of age is significant in determining whether an individual is a professional developer or not
# We need four categories: <35, NotDev; >35, NotDev; <35 Dev; >35 Dev
notDev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "NotDev")
notDev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "NotDev")
dev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "Dev")
dev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "Dev")
# Now we conduct a chi square test of independence
chisq_matrix <- matrix(c(22686,44710,2957,3109), nrow = 2, ncol = 2)
conTable = table(chisq_matrix)
print(conTable)
# GOF: dep is categorical, independent x variable is two samples
# We first want to create a contingency table to determine whether classification of age is significant in determining whether an individual is a professional developer or not
# We need four categories: <35, NotDev; >35, NotDev; <35 Dev; >35 Dev
notDev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "NotDev")
notDev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "NotDev")
dev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "Dev")
dev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "Dev")
# Now we conduct a chi square test of independence
chisq_matrix <- matrix(c(22686,44710,2957,3109), nrow = 2, ncol = 2)
conTable = table(chisq_matrix)
conTable
View(chisq_matrix)
View(chisq_matrix)
# GOF: dep is categorical, independent x variable is two samples
# We first want to create a contingency table to determine whether classification of age is significant in determining whether an individual is a professional developer or not
# We need four categories: <35, NotDev; >35, NotDev; <35 Dev; >35 Dev
notDev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "NotDev")
notDev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "NotDev")
dev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "Dev")
dev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "Dev")
# Now we conduct a chi square test of independence
chisq_matrix <- matrix(c(22686,44710,2957,3109), nrow = 2, ncol = 2)
conTable = table(chisq_matrix)
conTable
chitest = chisq.test(contable)
# GOF: dep is categorical, independent x variable is two samples
# We first want to create a contingency table to determine whether classification of age is significant in determining whether an individual is a professional developer or not
# We need four categories: <35, NotDev; >35, NotDev; <35 Dev; >35 Dev
notDev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "NotDev")
notDev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "NotDev")
dev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "Dev")
dev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "Dev")
# Now we conduct a chi square test of independence
chisq_matrix <- matrix(c(22686,44710,2957,3109), nrow = 2, ncol = 2)
conTable = table(chisq_matrix)
conTable
chitest = chisq.test(conTable)
chitest
# GOF: dep is categorical, independent x variable is two samples
# We first want to create a contingency table to determine whether classification of age is significant in determining whether an individual is a professional developer or not
# We need four categories: <35, NotDev; >35, NotDev; <35 Dev; >35 Dev
notDev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "NotDev")
notDev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "NotDev")
dev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "Dev")
dev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "Dev")
# Now we conduct a chi square test of independence
chisq_matrix <- matrix(c(22686,44710,2957,3109), nrow = 2, ncol = 2)
chitest = chisq.test(chisq_matrix)
chitest
# GOF: dep is categorical, independent x variable is two samples
# We first want to create a contingency table to determine whether classification of age is significant in determining whether an individual is a professional developer or not
# We need four categories: <35, NotDev; >35, NotDev; <35 Dev; >35 Dev
notDev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "NotDev")
notDev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "NotDev")
dev_under35 <- subset(df_final, df_final$Age == "<35" & df_final$MainBranch == "Dev")
dev_over35 <- subset(df_final, df_final$Age == ">35" & df_final$MainBranch == "Dev")
# Now we conduct a chi square test of independence
chisq_matrix <- matrix(c(22686,44710,2957,3109), nrow = 2, ncol = 2)
chitest = chisq.test(chisq_matrix)
chitest
chisq_matrix2 <- matrix(c(22686,2957,44710,3109), nrow = 2, ncol = 2)
chitest2 = chisq.test(chisq_matrix2)
chitest2
chitest
anovaRes = aov(ComputerSkills ~ EdLevel, data=df_final)
anovaRes = aov(ComputerSkills ~ EdLevel, data=df_final)
xkabledply(anovaRes)
anovaRes = aov(ComputerSkills ~ EdLevel, data=df_final)
xkabledply(anovaRes, title = "ANOVA result summary")
library(ggplot2)
library(tidyr)
library(dplyr)
library(ezids)
anovaRes = aov(ComputerSkills ~ EdLevel, data=df_final)
xkabledply(anovaRes, title = "ANOVA result summary")
summary(anovaRes)
anovaRes = aov(ComputerSkills ~ EdLevel, data=df_final)
anovaRes
anovaRes = aov(ComputerSkills ~ EdLevel, data=df_final)
summary(anovaRes)
anovaRes = aov(ComputerSkills ~ EdLevel, data=df_final)
summary(anovaRes)
help(z.test)
library(BSDA)
help(z.test)
group_yes <- df_final$PreviousSalary[df_final$MentalHealth == "Yes"]
group_no <- df_final$PreviousSalary[df_final$MentalHealth == "No"]
z.test(group_yes, group_no)
help(prop.test)
undergrad_employed_ztest <- prop.test(c(31509, 2319), c(34855,2547))
undergrad_employed_ztest
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ezids)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
head(df)
#structure of a data frame
str(df)
# Check the missing values and count them in each column
print(colSums(is.na(df)))
# Check duplicates
length(unique(df$Index))
# Extract the numeric columns
head(subset(df, select = c(names(df)[sapply(df, is.numeric)])))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(df_clean)
# Extract the character columns
head(subset(df_clean, select = c(names(df)[sapply(df, is.character)])))
df_clean$Age = factor(df_clean$Age)
df_clean$Accessibility = factor(df_clean$Accessibility)
df_clean$EdLevel = factor(df_clean$EdLevel, ordered = T,
levels = c("Other", "NoHigherEd", "Undergraduate", "Master", "PhD"))
df_clean$Gender = factor(df_clean$Gender)
df_clean$MentalHealth = factor(df_clean$MentalHealth)
df_clean$MainBranch = factor(df_clean$MainBranch)
str(df_clean)
length(unique(df_clean$Country))
df_final <- df_clean
head(df_final)
df_final %>%
separate_rows(HaveWorkedWith, sep = ";") %>%
group_by(HaveWorkedWith) %>%
summarise(Count = n()) %>%
arrange(desc(Count))
library(DataExplorer)
DataExplorer::create_report(df)
# Create a list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "Employed", "ComputerSkills")
# Create a boxplot for each column and store it in a list
boxplots <- lapply(df[columns_to_plot], boxplot, main = "Combined Boxplot", col="brown")
# Set up the plotting area to display all boxplots together
par(mfrow = c(1, length(columns_to_plot)))
# Display the boxplots
for (i in 1:length(boxplots)) {
boxplot(df[[columns_to_plot[i]]], main = columns_to_plot[i],col = "lightblue")
}
# plotting area layout
par(mfrow = c(1, 1))
#  list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "Employed", "ComputerSkills")
# display all boxplots together
par(mfrow = c(1, length(columns_to_plot)))
# Create and display boxplots without outliers
for (col in columns_to_plot) {
boxplot(df[[col]], main = col, outline = FALSE, col="navy")
}
# plotting area layout
par(mfrow = c(1, 1))
# Creating a map of responses by country
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = Age), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
# We first subset into the different education levels, here undergraduate
undergrad <- subset(df_final, df_final$EdLevel == "Undergraduate")
# For the two sample z test, we need our two samples, males and nonmales
undergrad_male <- subset(undergrad, undergrad$Gender == "Man") # Sample 1, males
undergrad_male_employed <- subset(undergrad_male, undergrad_male$Employment == "currently_employed")
# undergrad_male_nonemployed <- subset(undergrad_male, undergrad_male$Employment != "currently_employed")
undergrad_nonmales <- subset(undergrad, undergrad$Gender != "Man") # Sample 2, females and nonbinary
undergrad_nonmales_employed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment == "currently_employed"))
# undergrad_nonmales_nonemployed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment != "currently_employed"))
undergrad_employed_ztest <- prop.test(c(31509, 2319), c(34855,2547))
undergrad_employed_ztest
