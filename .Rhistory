# dep is quantitative and more than 3 independent categories
anovaRes <- aov(Employed ~ EdLevel, data=df_final)
anovaRes
View(df_final)
knitr::opts_chunk$set(echo = TRUE)
# uncomment and run the below line to install the required packages
#install.packages(c("gganimate", "png", "gifski"))
library(ggplot2)
library(tidyr)
library(dplyr)
library(ezids)
library(gganimate)
library(png)
library(gifski)
library(gridExtra)
library(maps)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
xkabledplyhead(df)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
xkabledplyhead(df)
#structure of a data frame
str(df)
# Check the missing values and count them in each column
print(colSums(is.na(df)))
# Check duplicates
length(unique(df$Index))
# Getting the number of rows and columns
num_rows <- dim(df)[1]
num_columns <- dim(df)[2]
# Getting the number of discrete and continuous columns
continuous_columns <- sum(sapply(df, is.numeric))
# Getting the number of complete rows
complete_rows <- sum(complete.cases(df))
# Calculating the total number of observations
total_observations <- num_rows * num_columns
# Displaying the information
cat("Basic Statistics and Raw Counts for the Dataset:\n")
cat("Rows:", num_rows, "\n")
cat("Columns:", num_columns, "\n")
cat("Continuous columns:", continuous_columns, "\n")
cat("Complete Rows:", complete_rows, "\n")
cat("Total observations:", total_observations, "\n")
knitr::opts_chunk$set(echo = TRUE)
# uncomment and run the below line to install the required packages
#install.packages(c("gganimate", "png", "gifski"))
library(ggplot2)
library(tidyr)
library(dplyr)
library(ezids)
library(gganimate)
library(png)
library(gifski)
library(gridExtra)
library(maps)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
xkabledplyhead(df)
#structure of a data frame
str(df)
# Check the missing values and count them in each column
print(colSums(is.na(df)))
# Check duplicates
length(unique(df$Index))
# Extract the numeric columns
head(subset(df, select = c(names(df)[sapply(df, is.numeric)])))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(df_clean)
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(type(c(df_clean$Employed, df_clean$Employment)))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(class(c(df_clean$Employed, df_clean$Employment)))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(class(df_clean))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
class(df_clean)
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
sapply(df_clean, class)
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
sapply(c(df_clean$Employed, df_clean$Employment), class)
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(df_clean)
# Extract the character columns
head(subset(df_clean, select = c(names(df)[sapply(df, is.character)])))
df_clean$Age = factor(df_clean$Age)
df_clean$Accessibility = factor(df_clean$Accessibility)
df_clean$EdLevel = factor(df_clean$EdLevel, ordered = T,
levels = c("Other", "NoHigherEd", "Undergraduate", "Master", "PhD"))
df_clean$Gender = factor(df_clean$Gender)
df_clean$MentalHealth = factor(df_clean$MentalHealth)
df_clean$MainBranch = factor(df_clean$MainBranch)
str(df_clean)
length(unique(df_clean$Country))
nrow(subset(df_clean, subset = df_clean$YearsCode<df_clean$YearsCodePro))
# We observe 588 such records
df_clean = subset(df_clean, subset = df_clean$YearsCode>df_clean$YearsCodePro)
# Create a list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "ComputerSkills")
# Set up the plotting area to display all boxplots together
par(mfrow = c(2, length(columns_to_plot)))
# Display the boxplots
for (i in 1:length(columns_to_plot)) {
boxplot(df_clean[[columns_to_plot[i]]], main = columns_to_plot[i],col = "lightblue")
}
for (i in 1:length(columns_to_plot)) {
hist(df_clean[[columns_to_plot[i]]], main = columns_to_plot[i], xlab = element_blank(), col = "lightblue")
}
# plotting area layout
par(mfrow = c(2, 1))
o_code= quantile(df_clean$YearsCode, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$YearsCode))
o_procode = quantile(df_clean$YearsCodePro, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$YearsCodePro))
o_presal = quantile(df_clean$PreviousSalary, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$PreviousSalary))
o_cskill = quantile(df_clean$ComputerSkills, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$ComputerSkills))
print(paste(o_code, o_procode, o_presal, o_cskill))
df_clean = subset(df_clean, subset = df_clean$YearsCode < 40)
df_clean = subset(df_clean, subset = df_clean$YearsCodePro < 40)
df_clean = subset(df_clean, subset = df_clean$ComputerSkills < 35)
df_final <- df_clean
head(df_final)
print(paste("Number of records in final data:", nrow(df_final)))
df_final <- df_clean
head(df_final)
str(df_final)
df_final <- df_clean
head(df_final)
subset(df_final, select = c(names(df)[sapply(df, is.factor | is.ordered | is.character)]))
df_final <- df_clean
head(df_final)
subset(df_final, select = c(names(df)[sapply(df, is.factor || is.ordered || is.character)]))
df_final <- df_clean
head(df_final)
subset(df_final, select = c(names(df)[(sapply(df, is.factor) | (sapply(df, is.ordered) | (sapply(df, is.character))]))
df_final <- df_clean
head(df_final)
subset(df_final, select = c(names(df)[(sapply(df, is.factor)) | (sapply(df, is.ordered)) | (sapply(df, is.character))]))
subset(df_final, select = c(names(df)[sapply(df, is.integer)]))
df_final <- df_clean
head(df_final)
subset(df_final, select = c(names(df_final)[(sapply(df_final, is.factor)) |
(sapply(df_final, is.ordered)) |
(sapply(df_final, is.character))]))
subset(df_final, select = c(names(df_final)[sapply(df_final, is.integer)]))
df_final <- df_clean
head(df_final)
colnames(subset(df_final, select = c(names(df_final)[(sapply(df_final, is.factor)) |
(sapply(df_final, is.ordered)) |
(sapply(df_final, is.character))])))
colnames(subset(df_final, select = c(names(df_final)[sapply(df_final, is.integer)])))
df_final <- df_clean
head(df_final)
# Getting the number of categorical and numerical columns
cat_cols <- colnames(subset(df_final, select = c(names(df_final)[(sapply(df_final, is.factor)) |
(sapply(df_final, is.ordered)) |
(sapply(df_final, is.character))])))
num_cols <- colnames(subset(df_final, select = c(names(df_final)[sapply(df_final, is.integer)])))
# Displaying the information
cat("Basic Statistics and Raw Counts for the Dataset:\n")
cat("Rows:", dim(df_final)[1])
cat("Columns:", dim(df_final)[2], "\n")
cat("Numerical columns:", num_cols, "\n")
cat("Categorical Columns:", cat_cols, "\n")
# Getting the number of categorical and numerical columns
cat_cols <- colnames(subset(df_final, select = c(names(df_final)[(sapply(df_final, is.factor)) |
(sapply(df_final, is.ordered)) |
(sapply(df_final, is.character))])))
num_cols <- colnames(subset(df_final, select = c(names(df_final)[sapply(df_final, is.integer)])))
# Displaying the information
cat("Basic Statistics and Raw Counts for the Dataset:\n")
cat("Rows:", dim(df_final)[1], "\n")
cat("Columns:", dim(df_final)[2], "\n")
cat("Numerical columns:", num_cols, "\n")
cat("Categorical Columns:", cat_cols, "\n")
# Creating a map of responses by country
world_map <- map_data("world")
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = Age), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = MentalHealth), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = EdLevel), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = Employment), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = subset(df_final, subset = Employed=='hired'), aes(EdLevel, after_stat(count))) +
geom_bar(aes(fill = Gender), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by gender for employed workers", x="Education Level", y="Count")
ggplot(data = df_final, aes(EdLevel)) +
geom_bar(aes(fill = Employment), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Employment", x="Education Level", y="Count")
ggplot(data = df_final, aes(EdLevel)) +
geom_bar(aes(fill = Employment), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Employment", x="Education Level", y="Count")
ggplot(data = df_final, aes(EdLevel)) +
geom_bar(aes(fill = Employment), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Employment", x="Education Level", y="Count")
ggplot(data = df_final, aes(MainBranch)) +
geom_bar(aes(fill = Age), position = 'dodge', alpha = 0.5) +
labs(title = "MainBranch by Age", x="MainBranch", y="Count")
ggplot(data = df_final, aes(x = PreviousSalary, fill = MentalHealth)) +
geom_density(alpha = 0.5) +
labs(title = "Density plot of Previous Salary by Mental Health", x="Previous Salary", y= 'Density')
ggplot(data = df_final, aes(x = MentalHealth, y = PreviousSalary)) +
geom_jitter(alpha = 0.5, col = 'navy') +
labs(title = "Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
plotdata <- df_final %>%
group_by(MentalHealth) %>%
summarize(mean_prevsalary = mean(PreviousSalary))
ggplot(data = plotdata, aes(x = MentalHealth, y = mean_prevsalary)) +
geom_bar(stat = 'identity', alpha = 0.5, aes(fill = MentalHealth)) +
labs(title = "Mean Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
df_final %>%
separate_rows(HaveWorkedWith, sep = ";") %>%
group_by(HaveWorkedWith) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) -> skills_df
head(skills_df, 10)
plot <- ggplot(data = head(skills_df, 10), aes(x = reorder(HaveWorkedWith, Count), y = Count)) +
geom_bar(stat = 'identity', aes(fill = HaveWorkedWith), alpha = 0.6) +
coord_flip() +
theme(axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(size = 0.1, color = "grey"),
panel.grid.minor.x = element_line(size = 0.1, color = "grey"),
plot.background = element_blank()) +
geom_text(aes(y = Count, label = Count)) +
labs(title = "Skills used by number of applicants",
x = "Skill", y = "No. of applicants possessing the skill")
anim <- plot +
transition_states(HaveWorkedWith, transition_length = 4, wrap = FALSE) +
shadow_mark() +
enter_grow() +
enter_fade() +
ease_aes('sine-in')
animate(anim)
#anim_save("Skills.gif", anim)
# Creating a map of responses by country
world_map <- map_data("world")
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = Age), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = MentalHealth), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = EdLevel), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
ggplot(data = df_final, aes(map_id = Country)) +
geom_map(aes(fill = Employment), map = world_map) +
expand_limits(x = world_map$long, y = world_map$lat)
loadPkg("rpart")
install.packages("rpart")
knitr::opts_chunk$set(echo = TRUE)
# install.packages("rpart")
loadPkg("rpart")
# install.packages("rpart")
library("rpart")
knitr::opts_chunk$set(echo = TRUE)
# uncomment and run the below line to install the required packages
#install.packages(c("gganimate", "png", "gifski"))
# install.packages("mltools")
# install.packages("data.table")
# install.packages("MLmetrics")
# install.packages("rpart")
library(mltools)
library(data.table)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ezids)
library(gganimate)
library(png)
library(gifski)
library(pROC)
library(MLmetrics)
library(rpart)
df = data.frame(read.csv('stackoverflow_full.csv', header = TRUE))
xkabledplyhead(df, title = "Job Applicants Data")
#structure of a data frame
str(df)
# Check the missing values and count them in each column
print(colSums(is.na(df)))
# Check duplicates
length(unique(df$Index))
# Extract the numeric columns
head(subset(df, select = c(names(df)[sapply(df, is.numeric)])))
df_clean <- subset(df, select = -c(Index))
df_clean$Employment = as.character(df_clean$Employment)
df_clean$Employment[df_clean$Employment == "1"] <- "currently_employed"
df_clean$Employment[df_clean$Employment=="0"] <- "not_currently_employed"
df_clean$Employment = factor(df_clean$Employment)
df_clean$Employed = as.character(df_clean$Employed)
df_clean$Employed[df_clean$Employed == "1"] <- "hired"
df_clean$Employed[df_clean$Employed == "0"] <- "not_hired"
df_clean$Employed = factor(df_clean$Employed)
str(df_clean)
# Extract the character columns
head(subset(df_clean, select = c(names(df)[sapply(df, is.character)])))
df_clean$Age = factor(df_clean$Age)
df_clean$Accessibility = factor(df_clean$Accessibility)
df_clean$EdLevel = factor(df_clean$EdLevel, ordered = T,
levels = c("Other", "NoHigherEd", "Undergraduate", "Master", "PhD"))
df_clean$Gender = factor(df_clean$Gender)
df_clean$MentalHealth = factor(df_clean$MentalHealth)
df_clean$MainBranch = factor(df_clean$MainBranch)
str(df_clean)
length(unique(df_clean$Country))
nrow(subset(df_clean, subset = df_clean$YearsCode<df_clean$YearsCodePro))
# We observe 588 such records
df_clean = subset(df_clean, subset = df_clean$YearsCode>df_clean$YearsCodePro)
# Create a list of the columns that we use in combined boxplot
columns_to_plot <- c("YearsCode", "YearsCodePro", "PreviousSalary", "ComputerSkills")
# Set up the plotting area to display all boxplots together
par(mfrow = c(2, length(columns_to_plot)))
# Display the boxplots
for (i in 1:length(columns_to_plot)) {
boxplot(df_clean[[columns_to_plot[i]]], main = columns_to_plot[i],col = "lightblue")
}
for (i in 1:length(columns_to_plot)) {
hist(df_clean[[columns_to_plot[i]]], main = columns_to_plot[i], xlab = element_blank(), col = "lightblue")
}
# plotting area layout
par(mfrow = c(2, 1))
o_code= quantile(df_clean$YearsCode, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$YearsCode))
o_procode = quantile(df_clean$YearsCodePro, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$YearsCodePro))
o_presal = quantile(df_clean$PreviousSalary, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$PreviousSalary))
o_cskill = quantile(df_clean$ComputerSkills, probs = 0.75, na.rm = FALSE) +
(1.5 * IQR(df_clean$ComputerSkills))
print(paste(o_code, o_procode, o_presal, o_cskill))
df_clean = subset(df_clean, subset = df_clean$YearsCode < 40)
df_clean = subset(df_clean, subset = df_clean$YearsCodePro < 40)
df_clean = subset(df_clean, subset = df_clean$ComputerSkills < 35)
df_final <- df_clean
xkabledplyhead(df_final, title = "Final Data")
# Getting the number of categorical and numerical columns
cat_cols <- colnames(subset(df_final, select = c(names(df_final)[(sapply(df_final, is.factor)) |
(sapply(df_final, is.ordered)) |
(sapply(df_final, is.character))])))
num_cols <- colnames(subset(df_final, select = c(names(df_final)[sapply(df_final, is.integer)])))
# Displaying the information
cat("Basic summary and Raw Counts for the Dataset:\n")
cat("Rows:", dim(df_final)[1], "\n")
cat("Columns:", dim(df_final)[2], "\n")
cat("Numerical columns:", num_cols, "\n")
cat("Categorical Columns:", cat_cols, "\n")
ggplot(data = subset(df_final, subset = Employed=='hired'), aes(EdLevel, after_stat(count))) +
geom_bar(aes(fill = Gender), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by gender for employed workers", x="Education Level", y="Count")
ggplot(data = df_final, aes(EdLevel)) +
geom_bar(aes(fill = Employment), position = 'dodge', alpha = 0.5) +
labs(title = "Education Level by Employment", x="Education Level", y="Count")
ggplot(data = df_final, aes(MainBranch)) +
geom_bar(aes(fill = Age), position = 'dodge', alpha = 0.5) +
labs(title = "MainBranch by Age", x="MainBranch", y="Count")
ggplot(data = df_final, aes(x = PreviousSalary, fill = MentalHealth)) +
geom_density(alpha = 0.5) +
labs(title = "Density plot of Previous Salary by Mental Health", x="Previous Salary", y= 'Density')
ggplot(data = df_final, aes(x = MentalHealth, y = PreviousSalary)) +
geom_jitter(alpha = 0.5, col = 'navy') +
labs(title = "Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
plotdata <- df_final %>%
group_by(MentalHealth) %>%
summarize(mean_prevsalary = mean(PreviousSalary))
ggplot(data = plotdata, aes(x = MentalHealth, y = mean_prevsalary)) +
geom_bar(stat = 'identity', alpha = 0.5, aes(fill = MentalHealth)) +
labs(title = "Mean Previous Salary by Mental Health", x = 'Mental Health', y="Previous Salary")
df_final %>%
separate_rows(HaveWorkedWith, sep = ";") %>%
group_by(HaveWorkedWith) %>%
summarise(Count = n()) %>%
arrange(desc(Count)) -> skills_df
head(skills_df, 10)
plot <- ggplot(data = head(skills_df, 10), aes(x = reorder(HaveWorkedWith, Count), y = Count)) +
geom_bar(stat = 'identity', aes(fill = HaveWorkedWith), alpha = 0.6) +
coord_flip() +
theme(axis.text.x = element_blank(),
axis.line = element_blank(),
axis.ticks = element_blank(),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(size = 0.1, color = "grey"),
panel.grid.minor.x = element_line(size = 0.1, color = "grey"),
plot.background = element_blank()) +
geom_text(aes(y = Count, label = Count)) +
labs(title = "Skills used by number of applicants",
x = "Skill", y = "No. of applicants possessing the skill")
anim <- plot +
transition_states(HaveWorkedWith, transition_length = 4, wrap = FALSE) +
shadow_mark() +
enter_grow() +
enter_fade() +
ease_aes('sine-in')
animate(anim)
#anim_save("Skills.gif", anim)
# We first subset into the different education levels, here undergraduate
undergrad <- subset(df_clean, df_clean$EdLevel == "Undergraduate")
# For the two sample z test, we need our two samples, males and nonmales
undergrad_male <- subset(undergrad, undergrad$Gender == "Man") # Sample 1, males
undergrad_male_employed <- subset(undergrad_male, undergrad_male$Employment == "currently_employed")
undergrad_nonmales <- subset(undergrad, undergrad$Gender != "Man") # Sample 2, females and nonbinary
undergrad_nonmales_employed <- (subset(undergrad_nonmales, undergrad_nonmales$Employment == "currently_employed"))
undergrad_employed_ztest <- prop.test(c(nrow(undergrad_male_employed), nrow(undergrad_nonmales_employed)), c(nrow(undergrad_male),nrow(undergrad_nonmales)))
undergrad_employed_ztest
# We first subset into the different education levels, here masters
masters <- subset(df_clean, df_clean$EdLevel == "Master")
# For the two sample z test, we need our two samples, males and nonmales
masters_male <- subset(masters, masters$Gender == "Man") # Sample 1, males
masters_male_employed <- subset(masters_male, masters_male$Employment == "currently_employed")
masters_nonmales <- subset(masters, undergrad$Gender != "Man") # Sample 2, females and nonbinary
masters_nonmales_employed <- (subset(masters_nonmales, masters_nonmales$Employment == "currently_employed"))
masters_employed_ztest <- prop.test(c(nrow(masters_male_employed), nrow(masters_nonmales_employed)), c(nrow(masters_male),nrow(masters_nonmales)))
masters_employed_ztest
# We first subset into the different education levels, here PhD
phd <- subset(df_clean, df_clean$EdLevel == "PhD")
# For the two sample z test, we need our two samples, males and nonmales
phd_male <- subset(phd, phd$Gender == "Man") # Sample 1, males
phd_male_employed <- subset(phd_male, phd_male$Employment == "currently_employed")
phd_nonmales <- subset(phd, phd$Gender != "Man") # Sample 2, females and nonbinary
phd_nonmales_employed <- (subset(phd_nonmales, phd_nonmales$Employment == "currently_employed"))
phd_employed_ztest <- prop.test(c(nrow(phd_male_employed), nrow(phd_nonmales_employed)), c(nrow(phd_male),nrow(phd_nonmales)))
phd_employed_ztest
loadPkg("ggplot2")
ggplot(df_clean, aes(x=EdLevel, y=ComputerSkills)) +
geom_boxplot( colour=c("#ff0000","#FFFF00", "#11cc11","#0000ff","#ff00ff"), alpha = .5, outlier.shape=8, outlier.size=4) +
labs(x="Education Level", y = "Number of Computer Skills")
View(df_final)
set.seed(1)
employfit <- rpart(Employed ~ ,, data=df_final, method="class", control = list(maxdepth = 4) )
set.seed(1)
employfit <- rpart(Employed ~ ., data=df_final, method="class", control = list(maxdepth = 4) )
printcp(employfit) # display the results
plotcp(employfit) # visualize cross-validation results
summary(employfit) # detailed summary of splits
# plot tree
plot(employfit, uniform=TRUE, main="Classification Tree for Employment")
text(employfit, use.n=TRUE, all=TRUE, cex=.8)
